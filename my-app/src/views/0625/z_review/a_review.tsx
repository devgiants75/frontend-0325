import React from 'react'

/*
! 컴포넌트의 정의
: UI(User Interface)의 독립적이고 재사용 가능한 조각

- 각 컴포넌트는 자체적인 상태(state)와 프로퍼티(props)를 가짐
- 특정한 UI를 렌더링하는 역할

컴포넌트는 주로 HTML과 JavaScript를 결합하여 작성
>> React에서는 JSX(JavaScript XML / TSX)를 사용하여 이러한 결합을 쉽게 작성 가능

# 컴포넌트 사용 목적
- 재사용성(Reusability)
  : 컴포넌트는 한 번 정의하면 여러 곳에서 재사용 가능
  >> 코드의 중복을 줄이고, 유지보수를 용이하게 함

- 모듈화(Modularity)
  : 컴포넌트는 독립적으로 개발되고 테스트될 수 있는 작은 단위
  >> 복잡한 애플리케이션을 작은 단위로 나누어 개발 가능

- 가독성(Readability)
  : 컴포넌트를 사용하면 코드가 구조적으로 조직되어 가독성 향상
  >> 협업 시 코드 이해도를 높이고, 디버깅을 용이하게 함

- 유지보수성(Maintainability)
  : 컴포넌트를 사용하면 각각의 컴포넌트를 독립적으로 업데이트할 수 있어 유지보수가 용이
  >> 특정 컴포넌트의 변경이 다른 부분에 영향을 주지 않음

# 리액트에서 컴포넌트의 역할

- UI 렌더링(Rendering UI)
  : 리액트 컴포넌트는 사용자 인터페이스를 구성하는 기본 단위
  >> 각 컴포넌트는 자신만의 렌더링 로직을 가지고 있으며, 이를 통해 특정한 UI를 화면에 표시

- 상태 관리(State Management)
  : 컴포넌트는 내부적으로 상태를 가질 수 있으며, 상태 변경에 따라 UI를 갱신
  >> 동적인 사용자 경험을 제공

- 프로퍼티 전달(Properties Passing)
  : 컴포넌트는 부모 컴포넌트로부터 props를 받아 사용 가능
  >> props는 컴포넌트 간에 데이터를 전달하는 수단으로 사용
  
- 이벤트 처리(Event Handling)
  : 컴포넌트는 사용자 이벤트(클릭, 입력 등)를 처리할 수 있는 핸들러를 가짐
  >> 사용자의 상호작용에 반응하는 인터페이스 생성 가능

- 컴포넌트 구성(Composition)
  : 리액트에서는 컴포넌트를 다른 컴포넌트 안에 포함 가능
  >> 복잡한 UI를 작은 컴포넌트들로 구성
*/
export default function a_review() {
  return (
    <div>a_review</div>
  )
}

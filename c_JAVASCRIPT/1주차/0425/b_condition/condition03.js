//! 조건문의 Best Practice

// : 비교 연산자 사용 시 '==' 대신 '===' 사용을 권장
// : '=='연산자는 두 값을 비교할 때 타입 변환을 수행
//   >> 1 == '1'
// : '===' 연산자는 타입 변환 없이 엄격한 타입 비교

//? 불필요한 조건 사용 X
let isValid = true; // 유효성의 여부를 boolean타입으로 저장

if (isValid === true) {}
// if(isValid) {}

if (isValid === false) {}
// if(!isValid) {}

//! ==연산자와 ===연산자의 각 연산자의 동작 방식 & === 연산자를 선호하는 이유
// 자바스크립트에서 == (동등 연산자)와 === (일치 연산자)는 두 값을 비교할 때 사용
// 위 두 연산자는 비교하는 방식에서 중요한 차이점을 가지고 있으며, 이로 인해 대부분의 경우 === 연산자의 사용이 권장

//? == 연산자 (동등 연산자)
// == 연산자는 두 값의 동등성을 검사할 때 사용
// : 이 연산자의 특징은 **타입 변환(type coercion)**을 수행한다는 것
// : 두 값의 타입이 서로 다를 경우 자바스크립트 엔진이 자동으로 두 값을 같은 타입으로 변환한 후 비교를 수행

console.log(0 == false);   // true, 숫자 0과 false는 동등함
console.log("0" == false); // true, 문자열 "0"과 false는 동등함
console.log("1" == 1);     // true, 문자열 "1"과 숫자 1은 동등함

//? === 연산자 (일치 연산자)
// === 연산자는 두 값의 일치성을 검사할 때 사용
// : 타입 변환을 수행하지 않고, 값과 타입이 모두 일치할 때만 true를 반환
// : 더 엄격한 비교를 제공하기 때문에 예측 가능하고, 오류 방지

console.log(0 === false);   // false, 타입과 값이 다름
console.log("0" === false); // false, 타입과 값이 다름
console.log("1" === 1);     // false, 타입이 다름

//? == 연산자 사용 방법

// - 간결한 코드 작성
// 특정 경우에는 코드의 간결함을 위해 ==를 사용 가능
// EX) 어떤 값이 false, 0, 빈 문자열(""), null, undefined 중 하나인지 체크할 때, ==를 사용하여 간단히 확인

let isActive = 0;
if (isActive == false) {
  console.log('활성 상태가 아닙니다.');
}
//! 자바스크립트의 즉시 호출 함수
// : 즉시 실행 함수 표현
// : IIFE (Immediately Invoked Function Expression)

//? IIFE 정의
// : 정의되자마자 즉시 호출(실행)되는 함수
// : 주로 변수의 스코프(변수가 유효한 범위, 지역)를 제한하여 전역 스코프의 오염을 방지하는 데 사용
//   >> 전역 변수는 코드 어디에서나 접근 가능하기 때문에 의도치 않은 변경이 발생 가능
//   >> 이를 방지하기 위한 하나의 기법이 IIFE

// : 활용: 초기화 코드 실행이 필요할 때 사용하며, 글로벌 스코프를 오염시키지 않기 위해 사용

//? IIFE의 대표적 형태
// : 익명함수를 생성하고 즉시 호출
// : 정의된 직후 자동으로 실행되는 함수 - 초기화 코드 실행이 필요할 때 유용하게 사용
// : 전역 스코프에 영향을 주지 않으면서 필요한 코드를 실행 가능

// (function() {

// })();

//? 이름 충돌 문제
// : 다른 스크립트나 라이브러리와 변수명이 충돌하는 문제

// >> JS에서는 스코프 충돌을 방지하기 위해서 중괄호를 사용 | 함수를 생성하여 블록을 생성

//& JS에서 스코프 충돌 방지 해결 방법
// let pi = 3.14; - Error (식별자가 이미 사용되고 있음을 나타내는 오류)
// console.log(`파이의 값은 ${pi}입니다.`);

let pi = 3.14;
console.log(`파이1의 값은 ${pi}입니다.`);

// 1. 블럭을 사용한 스코프 생성
{
  let pi = 3.14;
  console.log(`파이2의 값은 ${pi}입니다.`);
}

{
  let pi = 3.14159;
  console.log(`파이3의 값은 ${pi}입니다.`);

  // 섀도잉
  // : 블록이 다른(중첩될) 경우 내부 변수가 외부 변수를 가리는 현상
  {
    let pi = 3.141592653;
    console.log(`파이4의 값은 ${pi}입니다.`);
  }

  // 섀도잉 후에도 각각의 스코프의 변수값은 유지
  console.log('===섀도잉 후 pi의 값===');
  console.log(`파이3의 값은 ${pi}입니다.`);
}

// 함수 블록을 사용한 스코프 생성
function sample() {
  let pi = 3.14159625333333;
  console.log(`파이5의 값은 ${pi}입니다.`);
}

sample();

//? 즉시 호출 함수를 사용한 이름 충돌 문제 해결
let commonVar = '전역 변수';
console.log(commonVar);

// 스코프(범위)의 충돌을 방지하기 위해 함수를 사용
// : 일반적으로 전역의 스코프 내의 작성 코드와 동일하기 동작
(function() {
  let commonVar = 'IIFE 내부 변수'; // 전역 변수에 작성된 것 처럼 동작
  console.log(commonVar);
})();

console.log(commonVar); // '전역 변수'

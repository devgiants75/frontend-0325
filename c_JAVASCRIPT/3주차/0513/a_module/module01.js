//& 모듈이란 무엇인가?

//! 1. 모듈의 정의
// : 재사용 가능한 코드 조각
// : 하나의 모듈은 특정 기능을 수행하는 함수, 변수, 클래스 등을 포함 가능
// : 각각의 모듈은 독립적으로 개발되어 다른 코드에서 쉽게 재사용 가능
//  - 모듈은 큰 프로그램을 작은 부분으로 나누어 관리하기 쉽게 만들며
//    , 각 부분은 개별적으로 개발하고 테스팅

//! 2. 모듈의 필요성 및 장점
// 재사용성: 모듈을 사용하면 이미 작성된 코드를 새로운 프로젝트에 쉽게 재사용할 수 있어 개발 시간과 비용 절감
// 유지보수성: 코드를 모듈화하면 각 모듈을 독립적으로 수정하거나 업데이트할 수 있어, 전체 코드의 유지보수가 훨씬 간편
// 네임스페이스 관리: 모듈은 자체 네임스페이스를 가지므로, 함수나 변수 이름이 다른 파일의 이름과 충돌하는 것을 방지 가능
// 가독성 및 조직화: 모듈을 사용하면 관련된 기능을 그룹화하여 코드의 구조를 명확하게 할 수 있으며, 이는 프로젝트의 가독성과 조직화를 향상

//! 자바스크립트에서 모듈 사용의 역사
//? 초기 JavaScript
// : JavaScript가 처음 출시되었을 때는 모듈 시스템이 없어 전역 변수를 사용하여 코드를 관리
// >> 단점 - 코드가 커질수록 유지보수와 변수 이름 충돌의 문제
var username = '이승아'; // 전역 변수 - 해당 모듈 내에서만 접근 가능(module01.js)

//? CommonJS와 AMD
// : 서버 사이드(Node.js) 및 클라이언트 사이드(웹 브라우저)에서 모듈을 지원하기 위해 CommonJS와 Asynchronous Module Definition(AMD)이 등장
// >> CommonJS는 주로 Node.js에서 사용
// >> AMD는 비동기적으로 모듈을 로드하는 데 초점을 맞춘 웹용 라이브러리에서 사용

//? ES6 모듈
// : ECMAScript 2015(ES6)에서는 JavaScript에 공식적으로 모듈 시스템을 도입
// : import와 export 문을 사용하여 모듈을 가져오고 내보내는 방식
// >> 모듈화된 개발 방식을 표준화하고 브라우저와 서버 모두에서 네이티브 모듈 지원 가능

//! ES6 모듈의 특징
//? 정적 구조
// : ES6 모듈은 정적으로 분석 가능
// >> 런타임이 아닌 로딩 또는 컴파일 시간에 모듈 구조가 결정
// >> 툴과 엔진이 최적화와 코드 분석을 더 효율적으로 수행 가능

//? 구문
// : ES6 모듈은 import와 export 구문을 사용하여 모듈 간의 종속성을 선언적으로 관리
// >> 모듈에서 특정 기능을 내보내고 다른 모듈에서 해당 기능을 가져오는 동작 방식

// Export: 모듈에서 함수, 변수, 클래스 등을 내보내려면 export 키워드를 사용
// Import: 다른 모듈에서 내보낸 기능을 사용하려면 import 키워드로 가져옴

//! ES6 모듈의 이점
// 명시성
// : ES6 모듈은 사용하는 의존성을 파일의 상단에서 명시적으로 선언
// >> 코드의 가독성을 향상시키고 의존성 관리를 명확하게 사용

// 스코프 격리
// : 모듈 내에서 선언된 변수, 함수, 클래스 등은 모듈 외부에서 접근 불가
// >> 전역 변수의 사용을 줄이고, 네임스페이스 충돌을 방지

// 재사용성 및 유지보수
// : 모듈화된 코드 구조는 개발자가 개별적인 구성 요소를 쉽게 재사용하고 유지보수 가능
/*

! 웹의 동작 원리 소개
  : "클라이언트-서버 아키텍처" 이해

? 1. 클라이언트-서버 모델 개요

=== 클라이언트(Client) ===

정의: 사용자와 상호작용하는 장치 또는 애플리케이션
    >> 보통 웹 브라우저(예: Chrome, Firefox, Safari 등)를 의미
      
역할: 사용자가 입력한 명령을 서버로 보내고
      , 서버에서 받은 데이터를 사용자에게 표시

=== 서버(Server) ===

정의: 클라이언트의 요청을 처리하고 응답을 제공하는 장치 또는 애플리케이션
    >> 웹 서버, 데이터베이스 서버 등이 포함

역할: 클라이언트로부터 요청을 받아 이를 처리하고 결과를 반환

#
1. 클라이언트와 서버란 무엇인가요?
클라이언트는 사용자가 웹에서 정보를 요청하고 결과를 볼 수 있는 도구입니다. 예를 들어, 당신이 사용하는 웹 브라우저(Chrome, Firefox 등)가 클라이언트입니다.

서버는 클라이언트의 요청을 받아 처리하고 응답을 돌려주는 컴퓨터 시스템입니다. 웹 서버는 인터넷에 연결된 수많은 컴퓨터 중 하나로, 웹 페이지와 같은 정보를 저장하고 제공합니다.
#

? 2. 클라이언트-서버 상호작용 예시

1) 사용자가 웹 브라우저에서 URL을 입력

- 브라우저가 URL을 통해 서버에 접속하기 위해 HTTP 요청을 준비

2) 클라이언트(브라우저)가 서버에 HTTP 요청 전송

- HTTP 요청은 클라이언트의 요구사항을 담고 있음
  (예: 특정 웹 페이지를 요청)

3) 서버가 요청을 처리하고, 결과(HTML, CSS, JS 등)를 클라이언트에 응답

- 서버는 요청받은 작업을 수행하고, 결과 데이터를 HTTP 응답으로 클라이언트에게 전달

4) 클라이언트는 응답 받은 데이터를 사용자에게 표시

- 클라이언트는 받은 데이터를 렌더링하여 사용자에게 보여줌

#
2. 클라이언트-서버 상호작용은 어떻게 이루어집니까?
요청 단계: 사용자가 웹 브라우저에 URL(웹 페이지 주소)를 입력하면, 브라우저는 해당 주소의 서버에 정보를 요청하는 메시지(이를 HTTP 요청이라 합니다)를 보냅니다. 예를 들어, 'www.example.com'의 홈페이지를 보고 싶다면, 브라우저는 'www.example.com' 서버에 접속하여 홈페이지 정보를 요청합니다.

처리 단계: 서버는 받은 요청을 분석하고 필요한 작업을 수행합니다. 예를 들어, 사용자가 요청한 웹 페이지의 최신 버전을 찾습니다.

응답 단계: 요청을 처리한 후, 서버는 그 결과를 HTTP 응답이라는 형태로 클라이언트(브라우저)에게 전송합니다. 이 응답에는 웹 페이지의 코드(HTML, CSS, JavaScript 등)가 포함되어 있어 사용자가 볼 수 있습니다.

표시 단계: 클라이언트는 받은 데이터를 웹 페이지로 렌더링(표시)하여 사용자의 화면에 보여줍니다.

#
? 3. 클라이언트-서버 아키텍처의 장점
확장성: 서버는 동시에 여러 클라이언트의 요청을 처리 가능
유연성: 클라이언트와 서버는 서로 다른 플랫폼에서 동작 가능
보안성: 데이터는 중앙 서버에서 관리되고 제어
      클라이언트는 민감한 데이터를 직접 다루지 않음

#
3. 클라이언트-서버 아키텍처의 장점은 무엇인가요?
확장성: 하나의 서버가 동시에 많은 클라이언트의 요청을 처리할 수 있으므로, 많은 사용자가 서비스를 이용할 수 있습니다.
유연성: 클라이언트와 서버가 서로 다른 운영 체제나 하드웨어에서도 잘 동작할 수 있습니다. 예를 들어, Windows에서 돌아가는 클라이언트 애플리케이션과 Linux 서버가 통신할 수 있습니다.
보안성: 모든 중요한 데이터는 서버에서 관리되므로, 클라이언트는 민감한 정보를 직접 다루지 않습니다. 이는 데이터 유출 위험을 줄여줍니다.
#

*/